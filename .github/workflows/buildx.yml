name: buildx

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_FILE: Dockerfile
      IMAGE_NAME: ${{ github.repository }}
      PLATFORMS: linux/amd64,linux/arm64
    steps:
      - name: 🔰 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Prepare 
        id: prepare
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "docker_image=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "buildx_args=--platform $PLATFORMS \
            --build-arg TARGETPLATFORM=$PLATFORMS \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag $IMAGE_NAME:$VERSION --file $IMAGE_FILE ." >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx 📐
        uses: docker/setup-buildx-action@v3

      - name: 📦 Docker Buildx
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: 🔒 Login to DockerHub 
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 📌 Docker Push 
        if: success() && github.event_name != 'pull_request'
        run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: 🔍 Inspect 
        if: always() && github.event_name != 'pull_request'
        run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}