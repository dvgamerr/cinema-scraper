name: BuildX

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-18.04
    env:
      IMAGE_FILE: Dockerfile
      IMAGE_NAME: ${{ github.repository }}
      PLATFORMS: linux/amd64 #,linux/arm64
    outputs:
      container_name: ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Prepare üî∞
        id: prepare
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=v$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo ::set-output name=docker_image::${IMAGE_NAME}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform $PLATFORMS \
            --build-arg DENO_VERSION=v1.24.1 \
            --build-arg TARGETPLATFORM=$PLATFORMS \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VERSION=$VERSION \
            --tag $IMAGE_NAME:$VERSION --file $IMAGE_FILE .
      - name: Set up Docker Buildx üìê
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Docker Buildx ‚öôÔ∏è
        run: docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker Push üìå
        if: success() && github.event_name != 'pull_request'
        run: docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: Inspect üîç
        if: always() && github.event_name != 'pull_request'
        run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}