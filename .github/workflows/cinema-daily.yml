name: cinema-daily

on:
  schedule:
  - cron: 0 1 * * 2-5

env:
  IMAGE_NAME: task-cinema

jobs:
  trigger:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm i
      - name: Start Project
        run: npm start
        env:
          TZ: Asia/Bangkok
          NODE_ENV: production
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          EVENT_JOB: DAILY_ONCE


      # - name: Build image
      #   run: docker build . --tag $IMAGE_NAME

      # - name: Log into registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      # - name: Push image
      #   run: |
      #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest

      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION

      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
          
      # - name: Log into docker.io
      #   run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin

      # - name: Push image to docker.io
      #   run: |
      #     IMAGE_ID=${{ github.actor }}/$IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
